#include <iostream>
#include <string.h>
#include "conio.h"
#include <stdlib.h>
#include <Windows.h>
#include <time.h>
#include <ctime>
#include <string>
#include <vector>
#include <algorithm>
using namespace std;


void  keylimit(int& a)
{
	a = a % 1000;

	while (a < 111)
	{

		a = a % 1000;
	}
	//	cout << "key OK" << endl;                         //       <--------| нужно для отладки
}
void to_64(int &chislo) {
	if(chislo<0)
		chislo=chislo+256;
}


int main()
{
	int answer;
	SetConsoleCP(1251);
	SetConsoleOutputCP(1251);
	srand(time(NULL));
	cout << endl << "   Выберите операцию:" << endl << "   1 - Зашифровать данные" << endl << "   2 - Расшифровать данные" << endl << "   0 - выход" << endl << "     Ваш ответ: ";
	cin >> answer;
	
	while (answer != 0)
	{
		//мисклик
		if (answer != 1 && answer != 2 && answer != 0) {
			system("cls");
			cout << "ошибка";
			Sleep(1000);
			system("cls");
			cout << endl << "   Выберите операцию:" << endl << "   1 - Зашифровать данные" << endl << "   2 - Расшифровать данные" << endl << "   0 - выход" << endl << "     Ваш ответ: ";
			cin >> answer;
		}
		
		//................................................................................................................//
		//шифратор
		if (answer == 1) {

			cout << "  Введите сообщение для шифровки: " << endl << "  ";
			
			int const maxLengthmsg = 100000;
			string msg;
			cin.ignore();
			getline(cin,msg);				// ввод сообщения



			
			int Lengthmsg = msg.size();
			

			//		cout << "symbols poshitani..." << endl;              //       <--------| нужно для отладки
			 
			 vector <int> msgcall (Lengthmsg);
			for (int i = 0; i < Lengthmsg; i++)
			{
				msgcall[i] = int (msg[i]);
				//			cout << msgcall[i] << endl << endl;            // <-------------| Нужно было для отладки 

			}
			for_each(msgcall.begin() , msgcall.end(), to_64);


			int keyEVEN = rand(); //создаем ключи на рамндоме
			keylimit(keyEVEN);
			//		cout << "Key even done" << endl;						// <-------------| Нужно было для отладки 
			int keyODD = rand();
			keylimit(keyODD);
			//		cout << "Key odd done" << endl;                         // <-------------| Нужно было для отладки 

					//шифование
			for (int i = 0; i < Lengthmsg; i++)
			{

				if (i % 2 == 0)
					msgcall[i] = msgcall[i] * keyEVEN;
				if (i % 2 != 0)
					msgcall[i] = msgcall[i] * keyODD;
				//			cout << "kajdi even i odd is umnojen" << endl;         // <-------------| Нужно было для отладки 
			}


			
			//доп шифрование
			int posSum = keyEVEN % 10;
			int sumNumber = keyODD % 10;
			for (int i = 0; i < Lengthmsg; i++) {
				if (msgcall[i] % posSum == 0)
					msgcall[i] = msgcall[i] + 8;
			}

			//		cout << "4eto eshe poshitano" << endl;                // <-------------| Нужно было для отладки 

					//разворот масива
			reverse(msgcall.begin(), msgcall.end());
	

		cout << "     Ваше сообщение: " << endl << endl;


			cout << endl << Lengthmsg << keyEVEN << keyODD << endl;
			//вывод
			for (int i = 0; i < msgcall.size(); i++)
			{
				cout << msgcall[i] << endl;
			}


			cout << endl << "   Выберите операцию:" << endl << "   1 - Зашифровать данные" << endl << "   2 - Расшифровать данные" << endl << "   0 - выход" << endl << "     Ваш ответ: ";
			cin >> answer;
			

		}
	//.................................................................................................................................................................
		//дешифратор
		
		if (answer == 2)
		{

			cout << " Введите сообщение   " << endl << "  ";
			int key;
			cin >> key;
			int Lengthmsg = key / 1000000;//получили длину масива


			vector <int> msgcall1(Lengthmsg);
			for (int i = 0; i < Lengthmsg; i++)
			{

				cin >> msgcall1[i];

			}//получили сообщение в развернутом виде

			reverse(msgcall1.begin(), msgcall1.end());



			int keyODD = key % 1000;
			key = key / 1000;
			int keyEVEN = key % 1000;


			int posSum = keyEVEN % 10;
			int sumNumber = keyODD % 10;
			for (int i = 0; i < Lengthmsg; i++)
			{
				if (msgcall1[i] % posSum == 0)
					msgcall1[i] = msgcall1[i] - 8;
			}
			for (int i = 0; i < Lengthmsg; i++)
			{
				if (i % 2 == 0)
					msgcall1[i] = msgcall1[i] / keyEVEN;
				if (i % 2 != 0)
					msgcall1[i] = msgcall1[i] / keyODD;
			}

			char msg[10000];

			for (int i = 0; i < Lengthmsg; i++)
			{
				msg[i] = msgcall1[i];


			}
			cout << " Ваше расшифрованное сообщение:" << endl << endl;
			for (int i = 0; i < Lengthmsg; i++)
			{
				cout << msg[i];


			}
			cout << endl << endl << endl;
			cout << endl << "   Выберите операцию:" << endl << "   1 - Зашифровать данные" << endl << "   2 - Расшифровать данные" << endl << "0 - выход" << endl << "     Ваш ответ: ";
			cin >> answer;
		}

	
        else {
            cout << endl << "   Выберите операцию:" << endl << "   1 - Зашифровать данные" << endl << "   2 - Расшифровать данные" << endl << "   0 - выход" << endl << "     Ваш ответ: ";
            cin >> answer;
        }
    }
	

}
